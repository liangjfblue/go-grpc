// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package go_protoc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Request              string   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type Result struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "go_protoc.Request")
	proto.RegisterType((*Result)(nil), "go_protoc.Result")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x92, 0x95,
	0x94, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x8b, 0x20,
	0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x49, 0x8e, 0x8b, 0x2d, 0x28, 0xb5,
	0xb8, 0x34, 0xa7, 0x44, 0x48, 0x84, 0x8b, 0xb5, 0x28, 0xb5, 0x20, 0xa7, 0x12, 0xaa, 0x02, 0xc2,
	0x31, 0xda, 0xc5, 0xc8, 0xc5, 0xed, 0x01, 0x32, 0x3f, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0xc8,
	0x9c, 0x8b, 0xcb, 0x3d, 0xb5, 0x04, 0xa2, 0xc5, 0x50, 0x48, 0x48, 0x0f, 0x6e, 0x9d, 0x1e, 0xd4,
	0x2e, 0x29, 0x41, 0x14, 0x31, 0x90, 0x3a, 0x25, 0x06, 0x03, 0x46, 0x14, 0x8d, 0x46, 0x44, 0x6b,
	0xd4, 0x60, 0x14, 0xb2, 0x44, 0xd2, 0x68, 0x4c, 0x82, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xa0,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x54, 0xa1, 0xd1, 0xd1, 0x22, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloServerClient is the client API for HelloServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServerClient interface {
	GetResult1(ctx context.Context, in *Request, opts ...grpc.CallOption) (HelloServer_GetResult1Client, error)
	GetResult2(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetResult2Client, error)
	GetResult3(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetResult3Client, error)
}

type helloServerClient struct {
	cc *grpc.ClientConn
}

func NewHelloServerClient(cc *grpc.ClientConn) HelloServerClient {
	return &helloServerClient{cc}
}

func (c *helloServerClient) GetResult1(ctx context.Context, in *Request, opts ...grpc.CallOption) (HelloServer_GetResult1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloServer_serviceDesc.Streams[0], "/go_protoc.HelloServer/GetResult1", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerGetResult1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloServer_GetResult1Client interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type helloServerGetResult1Client struct {
	grpc.ClientStream
}

func (x *helloServerGetResult1Client) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServerClient) GetResult2(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetResult2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloServer_serviceDesc.Streams[1], "/go_protoc.HelloServer/GetResult2", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerGetResult2Client{stream}
	return x, nil
}

type HelloServer_GetResult2Client interface {
	Send(*Request) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type helloServerGetResult2Client struct {
	grpc.ClientStream
}

func (x *helloServerGetResult2Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServerGetResult2Client) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServerClient) GetResult3(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetResult3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloServer_serviceDesc.Streams[2], "/go_protoc.HelloServer/GetResult3", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerGetResult3Client{stream}
	return x, nil
}

type HelloServer_GetResult3Client interface {
	Send(*Request) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type helloServerGetResult3Client struct {
	grpc.ClientStream
}

func (x *helloServerGetResult3Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServerGetResult3Client) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServerServer is the server API for HelloServer service.
type HelloServerServer interface {
	GetResult1(*Request, HelloServer_GetResult1Server) error
	GetResult2(HelloServer_GetResult2Server) error
	GetResult3(HelloServer_GetResult3Server) error
}

// UnimplementedHelloServerServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServerServer struct {
}

func (*UnimplementedHelloServerServer) GetResult1(req *Request, srv HelloServer_GetResult1Server) error {
	return status.Errorf(codes.Unimplemented, "method GetResult1 not implemented")
}
func (*UnimplementedHelloServerServer) GetResult2(srv HelloServer_GetResult2Server) error {
	return status.Errorf(codes.Unimplemented, "method GetResult2 not implemented")
}
func (*UnimplementedHelloServerServer) GetResult3(srv HelloServer_GetResult3Server) error {
	return status.Errorf(codes.Unimplemented, "method GetResult3 not implemented")
}

func RegisterHelloServerServer(s *grpc.Server, srv HelloServerServer) {
	s.RegisterService(&_HelloServer_serviceDesc, srv)
}

func _HelloServer_GetResult1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServerServer).GetResult1(m, &helloServerGetResult1Server{stream})
}

type HelloServer_GetResult1Server interface {
	Send(*Result) error
	grpc.ServerStream
}

type helloServerGetResult1Server struct {
	grpc.ServerStream
}

func (x *helloServerGetResult1Server) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloServer_GetResult2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServerServer).GetResult2(&helloServerGetResult2Server{stream})
}

type HelloServer_GetResult2Server interface {
	SendAndClose(*Result) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type helloServerGetResult2Server struct {
	grpc.ServerStream
}

func (x *helloServerGetResult2Server) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServerGetResult2Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloServer_GetResult3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServerServer).GetResult3(&helloServerGetResult3Server{stream})
}

type HelloServer_GetResult3Server interface {
	Send(*Result) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type helloServerGetResult3Server struct {
	grpc.ServerStream
}

func (x *helloServerGetResult3Server) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServerGetResult3Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go_protoc.HelloServer",
	HandlerType: (*HelloServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResult1",
			Handler:       _HelloServer_GetResult1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResult2",
			Handler:       _HelloServer_GetResult2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetResult3",
			Handler:       _HelloServer_GetResult3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
